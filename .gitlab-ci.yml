default:
  image: node:14.17.4
  before_script:
    - npm ci --cache .npm --prefer-offline
    - |
      {
        echo "@${CI_PROJECT_ROOT_NAMESPACE}:registry=${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/npm/"
        echo "${CI_API_V4_URL#https?}/projects/${CI_PROJECT_ID}/packages/npm/:_authToken=\${CI_JOB_TOKEN}"
      } | tee --append .npmrc
    - chmod +x ./utils/setup-env.sh
    - ./utils/setup-env.sh
  cache:
    key: ${CI_COMMIT_REF_SLUG}
    paths:
      - .npm/
      - node_modules/

variables:
  NPM_TOKEN: ${CI_JOB_TOKEN}

stages:          
  - build
  - test
  - report
  - release
  - deploy
  - operate

.build-src:       
  stage: build
  script:
    - echo "Compiling the code..."
    - npm run compile
    - echo "Compile complete."
  artifacts:
    paths:
      - abi
      - artifacts

.build-doc:       
  stage: build
  script:
    - echo "Generating docs..."
    - npm run docgen
    - echo "Docs generation complete."
  artifacts:
    paths:
      - docs

secrets-test: 
  stage: test
  before_script:
    - apt-get update && apt-get install -y python-pip
    #- python3 -m pip install trufflehog3
    - pip install trufflehog3
  script:
    - echo "Running secrets scanner..."
    - trufflehog3 --no-history -v
  allow_failure: false

.vulnerability-test 1/2: 
  stage: test
  script:
    - apt-get update && apt-get install -y python3-pip
    - pip3 install slither-analyzer
    - echo "Running slither..."
    - slither .
  allow_failure: false

.vulnerability-test 2/2: 
  stage: test
  #image: mythril/myth
  before_script:
    - apt-get update
    - apt-get install -y software-properties-common
    - add-apt-repository ppa:ethereum/ethereum
    - apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys 1C52189C923F6CA9
    - apt-get update
    - apt-get install -y solc
    - apt-get install -y libssl-dev python3-dev python3-pip libleveldb-dev
    - pip3 install mythril
  script:
    - chmod +x ./utils/mythril-check.sh
    - ./utils/mythril-check.sh
  allow_failure: false

.lint-test:   
  stage: test 
  script:
    - echo "Linting code..."
    - npm run lint 
    - echo "No lint issues found."

.unit-test:   
  stage: test
  script:
    - echo "Running unit tests... "
    - npm run test

.coverage-report:
  stage: report
  script:
    - echo "Generating code coverage report..."
    - npm run coverage
  artifacts:
    paths:
      - coverage
      - coverage.json
  allow_failure: true

.gas-report:
  stage: report
  script:
    - echo "Generating gas report..."
    - npm run test # creates gas-report.txt
    - echo "<pre>" > gas-report.html
    - npx ansi-to-html gas-report.txt --fg black --bg white >> gas-report.html
  artifacts:
    paths:
      - gas-report.html

.release:
  stage: release
  script:
    - tar -zcvf abi.tar.gz abi --ignore-failed-read
    - tar -zcvf docs.tar.gz docs --ignore-failed-read
    - tar -zcvf artifacts.tar.gz artifacts --ignore-failed-read
    - tar -zcvf coverage.tar.gz coverage coverage.json --ignore-failed-read
    - tar -zcvf gas-report.tar.gz gas-report.html --ignore-failed-read
    - npm run semantic-release
  only:
    - main
  except:
    refs:
      - tags
    variables:
      - $CI_COMMIT_TITLE =~ /^RELEASE:.+$/

# Currently contracts are deployed into prod (testnet / mainnet) locally from a developer's machine.
# The results are saved in deployments dir which is kept in the repository.
deploy_staging:
  stage: deploy
  when: manual
  script:
    - echo "Deploy to staging environment"
    - npx hardhat --network ropsten deploy
    # todo: sync deployments dir to repo
  environment: staging
  only:
    - main

deploy_prod:
  stage: deploy
  when: manual
  script:
    - echo "Deploy to production environment"
    - npx hardhat --network mainnet deploy
  environment: production
  only:
    - main

verify_staging:
    stage: operate
    needs: [deploy_staging]
    script:
        - npx hardhat --network ropsten etherscan-verify --license UNLICENSED --force-license
        # - npx hardhat --network ropsten sourcify # alternative

verify_delpoy:
    stage: operate
    needs: [deploy_prod]
    script:
        - npx hardhat --network mainnet etherscan-verify --license NONE --force-license
        # - npx hardhat --network mainnet sourcify # alternative