image: node:latest

cache:
  paths:
    - node_modules

variables:
  # Package version can only contain numbers (0-9), and dots (.).
  # Must be in the format of X.Y.Z, i.e. should match /\A\d+\.\d+\.\d+\z/ regular expresion.
  # See https://docs.gitlab.com/ee/user/packages/generic_packages/#publish-a-package-file
  PACKAGE_VERSION: "1.2.3"
  PACKAGE_REGISTRY_URL: "${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/generic/release/${PACKAGE_VERSION}"

stages:          
  - build
  - test
  - report
  - upload
  - release
  - deploy
  - operate

default:
  before_script:
    - ./utils/setup_env.sh

build-src:       
  stage: build
  before_script:
    - npm install    
  script:
    - echo "Compiling the code..."
    - npm run compile
    - echo "Compile complete."
  artifacts:
    paths:
      - artifacts

.build-doc:       
  stage: build
  before_script:
    - npm install
    - INFURA_API_KEY=$INFURA_API_KEY
    - MNEMONIC=$MNEMONIC
  script:
    - echo "Compiling the code..."
    - npm run docgen
    - echo "Compile complete."
  artifacts:
    paths:
      - docs

.vulnerability-test 1/2: 
  stage: test
  before_script:
    - npm install
    - apt-get update && apt-get install -y python3-pip
    - pip3 install slither-analyzer
  script:
    - echo "Running slither..."
    - slither .
  allow_failure: false

.vulnerability-test 2/2: 
  stage: test
#  image: mythril/myth
  before_script:
    - apt-get update
    - apt-get install -y software-properties-common
    - add-apt-repository ppa:ethereum/ethereum
    - apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys 1C52189C923F6CA9
    - apt-get update
    - apt-get install -y solc
    - apt-get install -y libssl-dev python3-dev python3-pip libleveldb-dev
    - pip3 install mythril
  script:
    - ./utils/mythril-check.sh
  allow_failure: false

.lint-test:   
  stage: test 
  before_script:
      - npm install   
  script:
    - echo "Linting code..."
    - npm run lint 
    - echo "No lint issues found."

.unit-test:   
  stage: test
  before_script:
    - npm install    
  script:
    - echo "Running unit tests... "
    - npm run test

.coverage-report:
  stage: report
  before_script:
    - npm install 
  script:
    - echo "Generating code coverage report..."
    - npm run coverage
  artifacts:
    paths:
      - coverage
  allow_failure: true

.gas-report:
  stage: report
  before_script:
    - npm install
  script:
    - echo "Generating gas report..."
    - npm run test # creates gas-report.txt
    - echo "<pre>" > gas-report.html
    - npx ansi-to-html gas-report.txt --fg black --bg white >> gas-report.html
  artifacts:
    paths:
      - gas-report.html

upload:
  stage: upload
  image: curlimages/curl:latest
  rules:
    - if: $CI_COMMIT_TAG
  script:
    - |
      curl --header "JOB-TOKEN: ${CI_JOB_TOKEN}" --upload-file artifacts/contracts/Greeter.sol/Greeter.json ${PACKAGE_REGISTRY_URL}/Greeter.json
   
release 1/2:
  # Caution, as of 2021-02-02 these assets links require a login, see:
  # https://gitlab.com/gitlab-org/gitlab/-/issues/299384
  stage: release
  image: registry.gitlab.com/gitlab-org/release-cli:latest
  rules:
    - if: $CI_COMMIT_TAG
  script:
    - |
      release-cli create --name "Release $CI_COMMIT_TAG" --tag-name $CI_COMMIT_TAG \
        --assets-link "{\"name\":\"Greeter.json\",\"url\":\"${PACKAGE_REGISTRY_URL}/Greeter.json\"}"

release 2/2:
  stage: release
  before_script:
    - npm install 
  script:
    - npx semantic-release
  only:
    - main
  except:
    refs:
      - tags
    variables:
      - $CI_COMMIT_TITLE =~ /^RELEASE:.+$/

# Currently contracts are deployed into prod (testnet / mainnet) locally from a developer's machine.
# The results are saved in deployments dir which is kept in the repository.
.deploy_staging:
  stage: deploy
  when: manual
  script:
    - echo "Deploy to staging environment"
    - npx hardhat --network ropsten deploy
  environment: staging
  only:
    - main

.deploy_prod:
  stage: deploy
  when: manual
  script:
    - echo "Deploy to production environment"
    - npx hardhat --network mainnet deploy
  environment: production
  only:
    - main

.verify_staging:
    stage: operate
    needs: [deploy_staging]
    script:
        - npx hardhat --network ropsten etherscan-verify --license UNLICENSED --force-license
        - npx hardhat --network ropsten sourcify

.verify_delpoy:
    stage: operate
    needs: [deploy_prod]
    script:
        - npx hardhat --network mainnet etherscan-verify --license NONE --force-license
        - npx hardhat --network mainnet sourcify