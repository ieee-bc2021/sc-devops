image: node:latest

cache:
  paths:
    - node_modules

stages:          
  - build
  - test
  - report
  - deploy

build:       
  stage: build
  before_script:
    - npm install
  script:
    - echo "Compiling the code..."
    - npm run compile
    - echo "Compile complete."
  artifacts:
    paths:
      - artifacts

docgen:       
  stage: build
  before_script:
    - npm install
  script:
    - echo "Compiling the code..."
    - npm run docgen
    - echo "Compile complete."
  artifacts:
    paths:
      - docs

vulnerability-test 1/2: 
  stage: test
  before_script:
    - npm install
    - apt-get update && apt-get install -y python3-pip
    - pip3 install slither-analyzer
  script:
    - echo "Running slither..."
    - slither .
  allow_failure: true

vulnerability-test 2/2: 
  stage: test
  image: mythril/myth
#  before_script:
#    - apt-get update
#    - apt-get install -y software-properties-common
#    - add-apt-repository ppa:ethereum/ethereum
#    - apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys 1C52189C923F6CA9
#    - apt-get update
#    - apt-get install -y solc
#    - apt-get install -y libssl-dev python3-dev python3-pip
#    - pip3 install mythril
  script:
    - echo "Running mythril..."
    - analyze ./contracts/Greeter.sol
  allow_failure: true

lint-test:   
  stage: test 
  before_script:
      - npm install   
  script:
    - echo "Linting code..."
    - npm run lint 
    - echo "No lint issues found."

unit-test:   
  stage: test
  before_script:
    - npm install    
  script:
    - echo "Running unit tests... "
    - npm run test

coverage:
  stage: report
  before_script:
    - npm install 
  script:
    - echo "Generating code coverage report..."
    - npm run coverage
  artifacts:
    paths:
      - coverage
  allow_failure: true

gas-report:
  stage: report
  before_script:
    - npm install
  script:
    - echo "Generating gas report..."
    - npm run test # creates gas-report.txt
    - echo "<pre>" > gas-report.html
    - npx ansi-to-html gas-report.txt --fg black --bg white >> gas-report.html
  artifacts:
    paths:
      - gas-report.html

# Currently contracts are deployed into prod (testnet / mainnet) locally from a developer's machine.
# The results are saved in deployments dir which is kept in the repository.
deploy_staging:
  stage: deploy
  when: manual
  script:
    - echo "Deploy to staging environment"
    - npx hardhat --network ropsten deploy
  environment:
    name: staging
    url: https://staging.example.com
  only:
    - main

deploy_prod:
  stage: deploy
  when: manual
  script:
    - echo "Deploy to production environment"
    - npx hardhat --network mainnet deploy
  environment:
    name: production
    url: https://example.com
  only:
    - main

verify_staging:
    stage: deploy
    when: manual
    script:
        - npx hardhat --network ropsten etherscan-verify --license UNLICENSED --force-license
        - npx hardhat --network ropsten sourcify

verify_delpoy:
    stage: deploy
    when: manual
    script:
        - npx hardhat --network mainnet etherscan-verify --license NONE --force-license
        - npx hardhat --network mainnet sourcify
    
    